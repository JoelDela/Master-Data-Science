{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# _In this document I will solve some exercises about basic concepts in Python._\n",
    "## <font color=grey>This exercises are part of the content of the Master as a reinforcement for the knowledge acquired.</font>\n",
    "\n",
    "***\n",
    "    \n",
    "##### CONTENTS\n",
    "### [1. Quick exercises 1](#exer1)\n",
    "### [2. Quick exercises 2](#exer2)\n",
    "### [3. Quick exercises 3](#exer3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='exer1'></a> \n",
    "### Quick exercises 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Implement a function that takes as input three variables, and returns the largest of the three.  Do this without using the Python max() function! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "def g_largest_variable(a,b,c):\n",
    "    if len(str(a))>len(str(b)) and len(str(a))<len(str(c)):\n",
    "        return a\n",
    "    elif len(str(b))>len(str(a)) and len(str(b))>len(str(c)):\n",
    "        return b\n",
    "    else:\n",
    "        return c"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function “centenario” that will take Name, and year of birth  as inputs, check if year of birth is int and cast it to int if not, and print name together with the text explaining when the person is to have 100 years (hint: use isinstance)\n",
    "\n",
    "call to function: centenario(Antonio, 1967) \n",
    "\n",
    "output: Antonio will reach 100 years in 2067."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def centenario(name,yob):\n",
    "    if not isinstance(yob,int):\n",
    "        int(yob)\n",
    "    year=yob+100\n",
    "    print(\"{} will reach 100 years in {}\".format(name,year))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Antonio will reach 100 years in 2035\n"
     ]
    }
   ],
   "source": [
    "centenario('Antonio',1935)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='exer2'></a> \n",
    "### Quick exercises 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Write a function to calculate the number of words, number of lines, and length of a string the same way the wc command does in the command line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def count_words(var):\n",
    "    words=len(var.split())\n",
    "    length=len(var)\n",
    "    lines=len(var.split(\"\\n\"))\n",
    "    return {'words':words,'number of lines':lines,'length':length}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a Python program to remove the nth index character from a string. If the input string is empty print warning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def remove_idx(var,n):\n",
    "    if not str:\n",
    "        print(\"Warning, string is missing\")\n",
    "        return\n",
    "    else:\n",
    "        str(var)\n",
    "        new_var=var[:n-1]+var[n:]\n",
    "        print(new_var)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='exer3'></a> \n",
    "### Quick exercises 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " While inside python, go to ~/Data/opentraveldata/ and list the files. Use the list of visited directories from dhistand write for loop which will return for each visited directory its name and number of files inside. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/joeldela/Repos/DS_CL_files/opentraveldata\n"
     ]
    }
   ],
   "source": [
    "cd ~/Repos/DS_CL_files/opentraveldata/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/joeldela/Repos/Master-Data-Science 3\n",
      "/home/joeldela/Repos/DS_CL_files/opentraveldata 9\n"
     ]
    }
   ],
   "source": [
    "for i in _dh: \n",
    "    wc=!(ls -l $i | wc -l) \n",
    "    print(i, int(wc[0])-1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/home/joeldela/Repos/Master-Data-Science',\n",
       " '/home/joeldela/Repos/DS_CL_files/opentraveldata']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_dh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
